---
description: 
globs: 
alwaysApply: false
---
1. Core Principles
-Prefer standalone components over modules
-Always use the latest Vue 3 Composition API syntax
-The <script setup> section must always come before <template>
2. Code Structure
-Use a feature-first approach (organize code by functionality, not by type)
-Build small, reusable components with single responsibility
-Maintain a flat component hierarchy whenever possible
3. Styling
-Use SCSS exclusively:
-Prefer utility classes over writing custom CSS
-Avoid inline styles unless absolutely necessary
4. TypeScript:
-Always use explicit types; avoid any
-Use interfaces for complex data structures
-Enable and use strict mode in TypeScript configuration
5. State Management:
-Use ref or reactive locally within components for simple state
-Use Pinia for shared or complex state
-Prefer immutability when managing state
6. Component Communication:
Use props and emits for parent-child communication
-Avoid prop drilling; if necessary, use provide() and inject() — but only for configuration or dependency injection, not for dynamic data
7. API Handling:
-Use a centralized HttpClient for all API interactions
-Always handle errors in HTTP calls
-Create dedicated services for API logic
8. Performance:
-Use lazy loading for modules and components wherever applicable

Anti-patterns to Avoid:
1.Do not use jQuery or direct DOM manipulation
2.Avoid mixing multiple state management approaches
3.Do not overload components with business logic
4.Avoid deeply nested component hierarchies

5.Do not place business logic inside components — move it to services